//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
var palettes = require('users/gena/packages:palettes');
var palette = palettes.cmocean.Speed[7];

// Function to cloud mask Landsat-8
var maskL8SR = function(image) {
  // Bits 3 and 5 are cloud shadow and cloud, respectively
  var cloudShadowBitMask = ee.Number(2).pow(3).int();
  var cloudsBitMask = ee.Number(2).pow(5).int();
  // Get the QA band
  var qa = image.select('pixel_qa');
  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudShadowBitMask).eq(0).and(
            qa.bitwiseAnd(cloudsBitMask).eq(0));
  return image
      // Scale the data to reflectance and temperature
      .multiply(0.0001) //.select(['B2','B4', 'B5', 'system:time_start'], ['BLUE', 'RED', 'NIR', 'TIME'])
      .updateMask(mask)
      .set('system:time_start', image.get('system:time_start'))
      .set('SENSING_TIME', image.get('SENSING_TIME'));
};

// This function adds a band representing the image timestamp.
var addTime = function(image) {
  return image.addBands(image.metadata('system:time_start'));
};

// Load collection Landsat-8
var L8 = ee.ImageCollection("LANDSAT/LC08/C01/T1_SR")
              .filterDate('2017-07-01', '2018-07-31')
              .filter(ee.Filter.dayOfYear(1, 366))
              .filterBounds(aoi)
              .map(addTime);

//Get the clear areas
var L8_mask = L8.set('system:time_start', L8.get('system:time_start'))
                .set('date_range', L8.get('date_range'))
                .sort('system:time_start', true)
                .set('SENSING_TIME', L8.get('SENSING_TIME'))
                .map(maskL8SR);

print(L8_mask);


// Compute the median in each band, each pixel.
// Band names are B1_median, B2_median, etc.
var median = L8_mask.reduce(ee.Reducer.mean()); //.median()
median = median.select(['B2_mean','B3_mean', 'B4_mean', 'B5_mean', 'B6_mean', 'B7_mean'], ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']);
//median = median.select(['B2_median','B3_median', 'B4_median', 'B5_median', 'B6_median', 'B7_median'], ['blue', 'green', 'red', 'nir', 'swir1', 'swir2']);
print(median);

// The output is an Image.  Add it to the map.
var vis_param = {bands: ['swir1', 'nir', 'red'], gamma: 1};
Map.addLayer(median.clip(aoi), vis_param, 'RGB - Landsat8 Mosaic');


//////////////
// Linear Spectral Unmixing (Soil, Water and Vegetation)
var soil = [0.14, 0.16, 0.22, 0.39, 0.45, 0.27];
var veg = [0.086, 0.062, 0.043, 0.247, 0.109, 0.039];
var water = [0.07, 0.039, 0.023, 0.031, 0.011, 0.007];
var fractions = median.unmix([soil, veg, water]);
Map.addLayer(fractions.clip(aoi), {}, 'Unmixed - Landsat8 Mosaic');

////////////////
//NDVI
var ndvi = median.normalizedDifference(['nir', 'red']);
Map.addLayer(ndvi.clip(aoi), {}, 'NDVI - Landsat8 Mosaic');

//EVI
var evi = median.expression(
    '2.5  (nir - red) / (nir + 6  red - 7.5 * blue + 1)',
    {
        red: median.select('red'),
        nir: median.select('nir'),
        blue: median.select('blue'),
    });
Map.addLayer(ndvi.clip(aoi), {}, 'EVI - Landsat8 Mosaic');

//SAVI
var savi = median.expression(
    '1.5 * (nir - red) / (nir + red + 0.5)',
    {
        red: median.select('red'),
        nir: median.select('nir'),
    });
Map.addLayer(ndvi.clip(aoi), {}, 'SAVI - Landsat8 Mosaic');

//BAI
var bai = median.expression(
    '1 / ((0.1 - red)^2 + (0.06 - nir)^2)',
    {
        red: median.select('red'),
        nir: median.select('nir'),
    });
Map.addLayer(ndvi.clip(aoi), {}, 'BAI - Landsat8 Mosaic');

//NBR
var nbr = median.normalizedDifference(['nir', 'swir1']);
Map.addLayer(nbr.clip(aoi), {min: 0.1, max: 0.8, palette: palette}, 'NBR - Landsat8 Mosaic');

//MSAVI2
function getMSAVI2 (img){
  var p1 = ((img.select('red').multiply(2)).add(1)).pow(2);
  var p2 = (img.select('red').subtract(img.select('nir'))).multiply(8);
  var p3 = (img.select('red').multiply(2)).add(1);
  return img.addBands((p3.subtract((p1.subtract(p2)).sqrt())).divide(2).rename('msavi2'));
  }
var msavi2 = getMSAVI2(median);
msavi2 = msavi2.select('msavi2');
Map.addLayer(msavi2.clip(aoi), {min: -0.4, max: -0.1, palette: palette}, 'MSAVI2 - Landsat8 Mosaic');

//RGI
function getRGI (img){
  return img.addBands(img.select('red').divide(img.select('green')).rename('rgi'));
  }
var rgi = getRGI(median);
rgi = rgi.select('rgi');
Map.addLayer(rgi.clip(aoi), {min: 0.9, max: 1.6, palette: palette}, 'RGI - Landsat8 Mosaic');

//BRI
function getBRI (img){
  return img.addBands(img.select('blue').divide(img.select('red')).rename('bri'));
  }
var bri = getBRI(median);
bri = bri.select('bri');
Map.addLayer(bri.clip(aoi), {min: 0.4, max: 0.6, palette: palette}, 'BRI - Landsat8 Mosaic');

//SRI
function getSRI (img){
  return img.addBands(img.select('nir').divide(img.select('red')).rename('sri'));
  }
var sri = getSRI(median);
sri = sri.select('sri');
Map.addLayer(sri.clip(aoi), {min: 0.4, max: 0.6, palette: palette}, 'SRI - Landsat8 Mosaic');

//NDWI
var ndwi = median.normalizedDifference(['green', 'nir']);
Map.addLayer(ndwi.clip(aoi), {min: 0.1, max: 0.8, palette: palette}, 'NDWI - Landsat8 Mosaic');

//CIgreen
var clgreen = median.expression(
    '(nir / green) - 1',
    {
        green: median.select('green'),
        nir: median.select('nir'),
    });
Map.addLayer(clgreen.clip(aoi), {min: 0.1, max: 0.8, palette: palette}, 'CIgreen - Landsat8 Mosaic');

//WDRVI
var wdrvi = median.expression(
    '((0.1 * nir) - red) / ((0.1 * nir) + red)',
    {
        red: median.select('red'),
        nir: median.select('nir'),
    });
Map.addLayer(wdrvi.clip(aoi), {min: 0.1, max: 0.8, palette: palette}, 'WDRVI - Landsat8 Mosaic');

//GVMI
var gvmi = median.expression(
    '((nir + 0.1) - (swir1 + 0.02)) / ((nir + 0.1) + (swir1 + 0.02))',
    {
        swir1: median.select('swir1'),
        nir: median.select('nir'),
    });
Map.addLayer(gvmi.clip(aoi), {min: -0.09, max: 0.42, palette: palettes.kovesi.linear_ternary_blue_0_44_c57[7]}, 'GVMI - Landsat8 Mosaic');



//CVI
function getCVI (img){
  var p1 = img.select('nir');
  var p2 = img.select('red');
  var p3 = img.select('green').pow(2);
  var p4 = p2.divide(p3);
  return p1.multiply(p4).rename('cvi');
  }
var cvi = getCVI(median);
cvi = cvi.select('cvi');
Map.addLayer(cvi.clip(aoi), {min: 2.8, max: 7.2, palette: palette}, 'CVI - Landsat8 Mosaic');

//CMR
var cmr = median.expression(
    'swir1 / swir2',
    {
        swir1: median.select('swir1'),
        swir2: median.select('swir2'),
    });
Map.addLayer(cmr.clip(aoi), {min: 1.45, max: 2.47, palette: palette}, 'CMR - Landsat8 Mosaic');

//NDBI
var ndbi = median.expression(
    '(swir - nir) / (swir + nir)',
    {
        swir: median.select('swir1'),
        nir: median.select('nir'),
    });
Map.addLayer(ndbi.clip(aoi), {min: -0.38, max: 0.15}, 'NDBI - Landsat8 Mosaic');


